import java.util.*;

class Solution {
    public int[] findOriginalArray(int[] changed) {
        int n = changed.length;
        if (n % 2 != 0) return new int[0]; // Cannot form pairs

        Arrays.sort(changed); // Sort the array

        Map<Integer, Integer> freq = new HashMap<>();
        for (int num : changed) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
        }

        List<Integer> original = new ArrayList<>();

        for (int num : changed) {
            if (freq.get(num) == 0) continue; // Already used
            if (freq.getOrDefault(num * 2, 0) == 0) return new int[0]; // No pair

            // Use the number and its double
            original.add(num);
            freq.put(num, freq.get(num) - 1);
            freq.put(num * 2, freq.get(num * 2) - 1);
        }
        int[] result = new int[original.size()];
        for (int i = 0; i < original.size(); i++) {
            result[i] = original.get(i);
        }

        return result;
    }
}
